{
  "name": "triplesec",
  "version": "3.0.10",
  "description": "A CommonJS-compliant system for secure encryption of smallish secrets",
  "homepage": "https://github.com/keybase/triplesec",
  "repository": {
    "type": "git",
    "url": "https://github.com/keybase/triplesec.git"
  },
  "directories": {
    "lib": "lib"
  },
  "scripts": {
    "test": "make test",
    "build": "make"
  },
  "main": "lib/main",
  "devDependencies": {
    "browserify": "~3.1.0",
    "icsify": "~0.0.5",
    "iced-utils": "~0.1.1",
    "iced-test": "~0.0.8",
    "colors": "~0.6.2",
    "deep-equal": "~0.1.0",
    "cryptojs-1sp": "~3.1.2",
    "optimist": "~0.6.0",
    "rsp2json": "~0.0.1",
    "codo": "~2.0.2",
    "uglify-js": "~2.4.7"
  },
  "dependencies": {
    "more-entropy": "~0.0.2",
    "iced-coffee-script": "~1.7.1",
    "iced-error": "~0.0.6",
    "progress": "~1.1.2"
  },
  "author": {
    "name": "keybase"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    }
  ],
  "readme": "# node-triplesec\n\nA CommonJS module for symmetric key encryption of smallish secrets\n\n## How to install\n\n```sh\nnpm install triplesec\n```\n\n## How to Use\n\n### One-shot Mode\n\n```coffeescript\n{encrypt, decrypt} = require 'triplesec'\n\nkey = new Buffer 'top-secret-pw'\npt0 = new Buffer 'the secret!'\npt1 = new Buffer pt0\nencrypt { key, data : pt1 }, (err, ciphertext) ->\n\tdecrypt { key, data : ciphertext }, (err, pt2) ->\n\t\tconsole.log \"Right back the start! #{pt0} is #{pt2}\"\n```\n\n### Reusable Derived Keys\n\nThe most expensive part of TripleSec is to derive keys from your\ngiven passphrase.  This is intentionally so to make it more expensive\nto crack your password in the case that your ciphertext is stolen. \nHowever, you can spread this expense over multiple encryptions\nif you plan to be encrypting more than once:\n\n```coffeescript\n{Encryptor, Decryptor} = require 'triplesec'\n\nkey = new Buffer 'top-secret-pw'\nenc = new Encryptor { key }\ndec = new Decryptor { key }\npt0 = new Buffer 'the secret!'\npt1 = new Buffer pt0\npt2 = new Buffer pt0\nenc.run { data : pt1 }, (err, ct1) ->\n\tenc.run { data : pt2 }, (err, ct2) ->\n\t\tdec.run { data : ct1 }, (err, pt3) ->\n\t\t\tdec.run { data : ct2 }, (err, pt4) ->\n\t\t\t\tconsole.log \"Right back the start! #{pt0} is #{pt3} is #{pt4}\"\n```\n\nIf you want to resalt derived keys with every encryption, you should explicitly\nask for that. Otherwise, salt will be reused to speed up encryption\n(and decryption).\n\n```coffeescript\nenc.run { data : pt1 }, (err, ct1) ->\n\tenc.resalt {}, () ->\n\t\tenc.run { data : pt2 }, (err, ct2) ->\n```\n\n### Full API Documentation\n\nDocumentation generated by [codo](https://github.com/netzpirat/codo)\nis available [here](http://keybase.github.io/triplesec/codo/index.html).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/keybase/triplesec/issues"
  },
  "_id": "triplesec@3.0.10",
  "dist": {
    "shasum": "7c7cbde24c1e827580fc0832c570f3ab080a56bc"
  },
  "_from": "triplesec@",
  "_resolved": "https://registry.npmjs.org/triplesec/-/triplesec-3.0.10.tgz"
}
