{
  "name": "codo",
  "description": "A CoffeeScript documentation generator.",
  "keywords": [
    "coffeescript",
    "doc"
  ],
  "author": {
    "name": "Michael Kessler",
    "email": "michi@netzpiraten.ch"
  },
  "maintainers": [
    {
      "name": "Michael Kessler"
    },
    {
      "name": "Boris Staal"
    }
  ],
  "version": "2.0.8",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/coffeedoc/codo/raw/master/LICENSE.md"
    }
  ],
  "engines": {
    "node": ">=0.9.0"
  },
  "directories": {
    "lib": "./src",
    "theme/default/assets": "./theme/default/assets",
    "theme/default/templates": "./theme/default/templates"
  },
  "main": "./lib/codo.coffee",
  "bin": {
    "codo": "./bin/codo"
  },
  "dependencies": {
    "coffee-script": ">= 1.6.0",
    "walkdir": ">= 0.0.2",
    "optimist": ">= 0.3.0",
    "marked": ">= 0.2.10",
    "underscore": ">= 0.1.0",
    "underscore.string": ">= 0.1.0",
    "haml-coffee": ">= 0.6.0",
    "mkdirp": ">= 0.1.0",
    "connect": ">= 0.1.0",
    "async": ">= 0.1.22",
    "mincer": "~0.5.11",
    "stylus": "~0.38.0",
    "nib": "~1.0.0",
    "winston": "~0.7.2",
    "cli-table": "~0.2.0",
    "strftime": "~0.6.2"
  },
  "devDependencies": {
    "jasmine-node": ">= 1.13.1",
    "rimraf": "~2.2.2",
    "grunt": "~0.4.1",
    "grunt-release": "~0.6.0"
  },
  "homepage": "https://github.com/coffeedoc/codo",
  "repository": {
    "type": "git",
    "url": "git://github.com/coffeedoc/codo.git"
  },
  "bugs": {
    "url": "https://github.com/coffeedoc/codo/issues"
  },
  "scripts": {
    "test": "jasmine-node --coffee spec"
  },
  "readme": "# Codo [![Build Status](https://secure.travis-ci.org/coffeedoc/codo.png)](http://travis-ci.org/coffeedoc/codo)\n\nCodo is a [CoffeeScript](http://coffeescript.org/) API documentation generator, similar to [YARD](http://yardoc.org/).\nIts generated documentation is focused on CoffeeScript class syntax for classical inheritance.\n\n## Features\n\n* Detects classes, methods, constants, mixins & concerns.\n* Many tags to add semantics to your code.\n* Generates a nice site to browse your code documentation in various ways.\n* Documentation generation and hosting as a service on [CoffeeDoc.info](http://coffeedoc.info).\n\n## Codo in action\n\nAnnotate your source with Codo tags to add semantic information to your code. It looks like this:\n\n```CoffeeScript\n# Base class for all animals.\n#\n# @example How to subclass an animal\n#   class Lion extends Animal\n#     move: (direction, speed): ->\n#\nclass Example.Animal\n\n  # The Answer to the Ultimate Question of Life, the Universe, and Everything\n  @ANSWER = 42\n\n  # Construct a new animal.\n  #\n  # @param [String] name the name of the animal\n  # @param [Date] birthDate when the animal was born\n  #\n  constructor: (@name, @birthDate = new Date()) ->\n\n  # Move the animal.\n  #\n  # @example Move an animal\n  #   new Lion('Simba').move('south', 12)\n  #\n  # @param [Object] options the moving options\n  # @option options [String] direction the moving direction\n  # @option options [Number] speed the speed in mph\n  #\n  move: (options = {}) ->\n```\n\nThen generate the documentation with the `codo` command line tool. You can browse some\ngenerated Codo documentation on [CoffeeDoc.info](http://coffeedoc.info) to get a feeling how you can navigate in various ways through your code layers.\n\nIn the `Example` namespace you'll find some classes and mixins that makes absolutely no sense, its purpose is only to show the many features Code offers.\n\n## Installation\n\nCodo is available in NPM and can be installed with:\n\n```bash\n$ npm install -g codo\n```\n\nPlease have a look at the [CHANGELOG](https://github.com/coffeedoc/codo/releases) when upgrading to a newer Codo version with `npm update`.\n\n## Tags\n\nYou have to annotate your code with Codo tags to give it some meaning to the parser that generates the documentation. Each tag starts with the `@` sign followed by the tag name. See the following overview for a minimal description of all available tags. Most tags are self-explaining and the one that aren't are described afterwards in more detail.\n\nTags can take multiple lines, just indent subsequent lines by two spaces.\n\n### Overview\n\nThe following table shows the list of all available tags in alphabetical order with its expected options. An option in parenthesis is optional and the square brackets are part of the Codo tag format and must actually be written. Some tags can be defined multiple times and they can be applied to different contexts, either in the comment for a class, a comment for a mixin or in a method comment.\n\n<table>\n  <thead>\n    <tr>\n      <td><strong>Tag format</strong></td>\n      <td><strong>Multiple occurrences</strong></td>\n      <td><strong>Classes</strong></td>\n      <td><strong>Mixins</strong></td>\n      <td><strong>Methods</strong></td>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><strong>@abstract</strong> (message)</td>\n      <td></td>\n      <td>&#10004;</td>\n      <td>&#10004;</td>\n      <td>&#10004;</td>\n    </tr>\n    <tr>\n      <td><strong>@author</strong> name</td>\n      <td>&#10004;</td>\n      <td>&#10004;</td>\n      <td>&#10004;</td>\n      <td>&#10004;</td>\n    </tr>\n    <tr>\n      <td><strong>@concern</strong> mixin</td>\n      <td>&#10004;</td>\n      <td>&#10004;</td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><strong>@copyright</strong> name</td>\n      <td></td>\n      <td>&#10004;</td>\n      <td>&#10004;</td>\n      <td>&#10004;</td>\n    </tr>\n    <tr>\n      <td><strong>@deprecated</strong></td>\n      <td></td>\n      <td>&#10004;</td>\n      <td>&#10004;</td>\n      <td>&#10004;</td>\n    </tr>\n    <tr>\n      <td><strong>@example</strong> (title)<br/>&nbsp;&nbsp;Code</td>\n      <td>&#10004;</td>\n      <td>&#10004;</td>\n      <td>&#10004;</td>\n      <td>&#10004;</td>\n    </tr>\n    <tr>\n      <td><strong>@extend</strong> mixin</td>\n      <td>&#10004;</td>\n      <td>&#10004;</td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><strong>@include</strong> mixin</td>\n      <td>&#10004;</td>\n      <td>&#10004;</td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><strong>@note</strong> message</td>\n      <td>&#10004;</td>\n      <td>&#10004;</td>\n      <td>&#10004;</td>\n      <td>&#10004;</td>\n    </tr>\n    <tr>\n      <td><strong>@method</strong> signature<br/>&nbsp;&nbsp;Method tags</td>\n      <td>&#10004;</td>\n      <td>&#10004;</td>\n      <td></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><strong>@mixin</strong></td>\n      <td></td>\n      <td></td>\n      <td>&#10004;</td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><strong>@option</strong> option [type] name description</td>\n      <td>&#10004;</td>\n      <td></td>\n      <td></td>\n      <td>&#10004;</td>\n    </tr>\n    <tr>\n      <td><strong>@event</strong> name [description]<br />&nbsp;&nbsp;Event tags</td>\n      <td>&#10004;</td>\n      <td></td>\n      <td></td>\n      <td>&#10004;</td>\n    </tr>\n    <tr>\n      <td><strong>@overload</strong> signature<br/>&nbsp;&nbsp;Method tags</td>\n      <td>&#10004;</td>\n      <td></td>\n      <td></td>\n      <td>&#10004;</td>\n    </tr>\n    <tr>\n      <td>\n        <strong>@param</strong> [type] name description<br/>\n        <strong>@param</strong> name [type] description<br/>\n      </td>\n      <td>&#10004;</td>\n      <td></td>\n      <td></td>\n      <td>&#10004;</td>\n    </tr>\n    <tr>\n      <td><strong>@private</strong></td>\n      <td></td>\n      <td>&#10004;</td>\n      <td>&#10004;</td>\n      <td>&#10004;</td>\n    </tr>\n    <tr>\n      <td><strong>@property</strong> [type] description</td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td>&#10004;</td>\n    </tr>\n    <tr>\n      <td><strong>@return</strong> [type] description</td>\n      <td></td>\n      <td></td>\n      <td></td>\n      <td>&#10004;</td>\n    </tr>\n    <tr>\n      <td><strong>@see</strong> link/reference</td>\n      <td>&#10004;</td>\n      <td>&#10004;</td>\n      <td>&#10004;</td>\n      <td>&#10004;</td>\n    </tr>\n    <tr>\n      <td><strong>@since</strong> version</td>\n      <td></td>\n      <td>&#10004;</td>\n      <td>&#10004;</td>\n      <td>&#10004;</td>\n    </tr>\n    <tr>\n      <td><strong>@throw</strong> message</td>\n      <td>&#10004;</td>\n      <td></td>\n      <td></td>\n      <td>&#10004;</td>\n    </tr>\n    <tr>\n      <td><strong>@todo</strong> message</td>\n      <td>&#10004;</td>\n      <td>&#10004;</td>\n      <td>&#10004;</td>\n      <td>&#10004;</td>\n    </tr>\n    <tr>\n      <td><strong>@version</strong> version</td>\n      <td></td>\n      <td>&#10004;</td>\n      <td>&#10004;</td>\n      <td>&#10004;</td>\n    </tr>\n    <tr>\n      <td><strong>@nodoc</strong></td>\n      <td></td>\n      <td>&#10004;</td>\n      <td>&#10004;</td>\n      <td>&#10004;</td>\n    </tr>\n  </tbody>\n</table>\n\n### Alternative syntax\n\nYou can also use curly braces instead of square brackets if you prefer:\n\n```CoffeeScript\n# Move the animal.\n#\n# @example Move an animal\n#   new Lion('Simba').move('south', 12)\n#\n# @param {Object} options the moving options\n# @option options {String} direction the moving direction\n# @option options {Number} speed the speed in mph\n#\nmove: (options = {}) ->\n```\n\nIt's also possible to use [CoffeeScript block comments](http://coffeescript.org/#strings) instead of the normal\ncomments. If you solely use block comments, you may want to use the `--cautious` flag to disable the internal comment conversion.\n\n```CoffeeScript\n###\nMove the animal.\n\n@example Move an animal\n  new Lion('Simba').move('south', 12)\n\n@param [Object] options the moving options\n@option options [String] direction the moving direction\n@option options [Number] speed the speed in mph\n###\nmove: (options = {}) ->\n```\n\nIf you want to compile your JavaScript with Google Closure and make use of the special block comments with an asterisk, you want to use the `--closure` flag so that Codo ignores the asterisk.\n\n### Parameters\n\nThere are two different format recognized for your parameters, so you can chose your favorite. This one is with the\nparameter after the parameter type:\n\n```CoffeeScript\n# Feed the animal\n#\n# @param [World.Food] food the food to eat\n# @param [Object] options the feeding options\n# @option options [String] time the time to feed\n#\nfeed: (food) ->\n```\n\nAnd this one with the name before the type:\n\n```CoffeeScript\n# Feed the animal\n#\n# @param food [World.Food] the food to eat\n# @param options [Object] the feeding options\n# @option options time [String] the time to feed\n#\nfeed: (food) ->\n```\n\nThe parameter type can contain multiple comma separated types:\n\n```CoffeeScript\n# Feed the animal\n#\n# @param [String, Char] input\n# @return [Integer, Float] output\n#\ndo: (input) ->\n```\n\nEach known type will be automatically linked. Also named parameters are recognized:\n\n```CoffeeScript\nclass Classmate\n\n  # @param {string} name Full name (first + last)\n  # @param {string} phone Phone number\n  # @param {obj} picture JPG of the person\n  constructor: ( {@name, @phone, picture} ) ->\n\n  # @param {string} reason Why I'm no longer friends\n  # @param {Date} revisit_decision_on When to reconsider\n  unfriend: ( {reason, revisit_decision_on} ) ->\n```\n\n### Options\n\nIf you have an object as parameter and you like to define the accepted properties as options to the method, you can use the `@options` tag:\n\n\n```CoffeeScript\n# Feed the animal\n#\n# @param [Object] options the calculation options\n# @option options [Integer] age the age of the animal\n# @option options [Integer] weight the weight of the animal\n#\nexpectationOfLife: (options) ->\n```\n\nThe first parameter to the option tag is the parameter name it describes, followed by the parameter type, name and\ndescription.\n\n### Types\n\nThe object types for the `@param`, `@option` and `@return` tags are parsed for known classes or mixins and linked. You can also define types for Arrays with:\n\n```CoffeeScript\n#\n# @param [World.Region] region the region of the herd\n# @return [Array<Animals>] the animals in the herd\n#\ngetHerdMembers: (regions) ->\n```\n\n### Properties\n\nYou can mark an instance variable as property of the class by using the `@property` tag like:\n\n```CoffeeScript\nclass Person\n\n  # @property [Array<String>] the nicknames\n  nicknames: []\n```\n\nIn addition, the following properties pattern is detected:\n\n```CoffeeScript\nclass Person\n\n  get = (props) => @::__defineGetter__ name, getter for name, getter of props\n  set = (props) => @::__defineSetter__ name, setter for name, setter of props\n\n  # @property [String] The person name\n  get name: -> @_name\n  set name: (@_name) ->\n\n  # The persons age\n  get age: -> @_age\n```\n\nIf you follow this convention, they will be shown in the generated documentation with its read/write status shown. To specify type of the property, use the `@property` tag.\n\n### Method overloading\n\nIf you allow your method to take different parameters, you can describe the method overloading with the `@overload` tag:\n\n```CoffeeScript\n# This is a generic Store set method.\n#\n# @overload set(key, value)\n#   Sets a value on key\n#   @param [Symbol] key describe key param\n#   @param [Object] value describe value param\n#\n# @overload set(value)\n#   Sets a value on the default key `:foo`\n#   @param [Object] value describe value param\n#   @return [Boolean] true when success\n#\nset: (args...) ->\n```\n\nThe `@overload` tag must be followed by the alternative method signature that will appear in the documentation, followed by any method tag indented by two spaces.\n\n### Virtual methods\n\nIf you copy over functions from other objects without using mixins or concerns, you can add documentation for this\nvirtual (or dynamic) method with the `@method` tag:\n\n```CoffeeScript\n# This class has a virtual method, that doesn't\n# exist in the source but appears in the documentation.\n#\n# @method #set(key, value)\n#   Sets a value on key\n#   @param [Symbol] key describe key param\n#   @param [Object] value describe value param\n#\nclass VirtualMethods\n```\n\nThe `@method` tag must be followed by the method signature that will appear in the documentation, followed\nby any method tag indented by two spaces. The difference to the `@overload` tag beside the different context is that the signature should contain either the instance prefix `#` or the class prefix `.`.\n\n### Mixins\n\nIt's common practice to mix in objects to share common logic when inheritance is not suited. You can read\nmore about mixins in the [The Little Book on CoffeeScript](http://arcturo.github.com/library/coffeescript/03_classes.html).\n\nSimply mark any plain CoffeeScript object with the `@mixin` tag to have a mixin page generated that supports many tags:\n\n```CoffeeScript\n# Speed calculation for animal.\n#\n# @mixin\n# @author Rockstar Ninja\n#\nExample.Animal.Speed =\n\n  # Get the distance the animal will put back in a certain time.\n  #\n  # @param [Integer] time Number of seconds\n  # @return [Integer] The distance in miles\n  #\n  distance: (time) ->\n```\n\nNext mark the target object that includes one or multiple mixins:\n\n```CoffeeScript\n# @include Example.Animal.Speed\nclass Example.Animal.Lion\n```\n\nand you'll see the mixin methods appear as instance methods in the lion class documentation. You can also extend a mixin:\n\n```CoffeeScript\n# @extend Example.Animal.Speed\nclass Example.Animal.Lion\n```\n\nso its methods will show up as class methods.\n\n#### Concerns\n\nA concern is a combination of two mixins, one for instance methods and the other for class methods and it's automatically detected when a mixin has both a `ClassMethods` and an `InstanceMethods` property:\n\n```CoffeeScript\n# Speed calculations for animal.\n#\n# @mixin\n# @author Rockstar Ninja\n#\nExample.Animal.Speed =\n\n  InstanceMethods:\n\n    # Get the distance the animal will put back in a certain time.\n    #\n    # @param [Integer] time Number of seconds\n    # @return [Integer] The distance in miles\n    #\n    distance: (time) ->\n\n  ClassMethods:\n\n    # Get the common speed of the animal in MPH.\n    #\n    # @param [Integer] age The age of the animal\n    # @return [Integer] The speed in MPH\n    #\n    speed: (age) ->\n```\n\nYou can use `@concern` to include and extend the correspondent properties:\n\n```CoffeeScript\n# @concern Example.Animal.Speed\nclass Example.Animal.Lion\n```\n\n### Non-class methods and variables\n\nYou can also document your non-class, top level functions and constants within a file. As soon Codo detects these types within a file, it will be added to the file list and you can browse your file methods and constants.\n\n## Text processing\n\n### GitHub Flavored Markdown\n\nCodo class, mixin and method documentation and extra files written in\n[Markdown](http://daringfireball.net/projects/markdown/) syntax are rendered as full\n[GitHub Flavored Markdown](http://github.github.com/github-flavored-markdown/).\n\nThe `@return`, `@param`, `@option`, `@see`, `@author`, `@copyright`, `@note`, `@todo`, `@since`, `@version` and\n`@deprecated` tags rendered with a limited Markdown syntax, which means that only inline elements will be returned.\n\n### Automatically link references\n\nCodo comments and all tag texts will be parsed for references to other classes, methods and mixins, and are automatically linked. The reference searching will not take place within code blocks, thus you can avoid reference searching errors by surround your code block that contains curly braces with backticks.\n\nThere are several ways of link types supported and all can take an optional label after the link.\n\n* Normal URL links: `{http://coffeescript.org/}` or `{http://coffeescript.org/ Try CoffeeScript}`\n* Link to a class or mixin: `{Animal.Lion}` or `{Animal.Lion The might lion}`\n* Direct link to an instance method: `{Animal.Lion#walk}` or `{Animal.Lion#walk The lion walks}`\n* Direct link to a class method: `{Animal.Lion.constructor}` or `{Animal.Lion.constructor} A new king was born`\n\nThe `@see` tag supports the same link types, just without the curly braces:\n\n```CoffeeScript\n@see http://en.wikipedia.org/wiki/Lion The wikipedia page about lions\n```\n\n## Generate\n\nAfter the installation you will have a `codo` binary that can be used to generate the documentation recursively for all CoffeeScript files within a directory.\n\n```bash\n$ codo --help\nUsage: codo [options] [source_files [- extra_files]]\n\nOptions:\n  --help, -h          Show this help                          \n  --version           Show version                            \n  --extension, -x     Coffee files extension                    [default: \"coffee\"]\n  --output, -o        The output directory                      [default: \"./doc\"]\n  --theme             The theme to be used                      [default: \"default\"]\n  --name, -n          The project name used                   \n  --readme, -r        The readme file used                    \n  --quiet, -q         Supress warnings                          [default: false]\n  --verbose, -v       Show parsing errors                       [default: false]\n  --undocumented, -u  List undocumented objects                 [default: false]\n  --closure           Try to parse closure-like block comments  [default: false]\n  --private, -p       Show privates                             [default: false]\n  --analytics, -a     The Google analytics ID                   [default: false]\n  --title, -t         HTML Title                                [default: \"Codo Documentation\"]\n```\n\nCodo wants to be smart and tries to detect the best default settings for the sources, the readme, the extra files and the project name, so the above defaults may be different on your project.\n\n### Project defaults\n\nYou can define your project defaults by writing your command line options to a `.codoopts` file:\n\n```bash\n--name       \"Codo\"\n--readme     README.md\n--title      \"Codo Documentation\"\n--private\n--quiet\n--extension  coffee\n--output     ./doc\n./src\n-\nLICENSE\nCHANGELOG.md\n```\n\nPut each option flag on a separate line, followed by the source directories or files, and optionally any extra file that should be included into the documentation separated by a dash (`-`). If your extra file has the extension `.md`, it'll be rendered as Markdown.\n\n## Keyboard navigation\n\nYou can quickly search and jump through the documentation by using the fuzzy finder dialog:\n\n* Open fuzzy finder dialog: `T`\n\nIn frame mode you can toggle the list naviation frame on the left side:\n\n* Toggle list view: `L`\n\nYou can focus a list in frame mode or toggle a tab in frameless mode:\n\n* Class list: `C`\n* Mixin list: `I`\n* File list: `F`\n* Method list: `M`\n* Extras list: `E`\n\nYou can focus and blur the search input:\n\n* Focus search input: `S`\n* Blur search input: `Esc`\n\nIn frameless mode you can close the list tab:\n\n* Close list tab: `Esc`\n\n## Report issues\n\nIssues hosted at [GitHub Issues](https://github.com/coffeedoc/codo/issues).\n\nThe Codo specs are template based, so make sure you provide a code snippet that can be added as failing spec to the\nproject when reporting an issue with parsing your CoffeeScript code. The other thing that might be useful is the actual exception happening (run with `-d`).\n\n## Development\n\nSource hosted at [GitHub](https://github.com/coffeedoc/codo).\n\nPull requests are very welcome! Please try to follow these simple rules if applicable:\n\n* Please create a topic branch for every separate change you make.\n* Make sure your patches are well tested.\n* Update the documentation.\n* Update the README.\n* Update the CHANGELOG for noteworthy changes.\n* Please **do not change** the version number.\n\n## Alternatives\n\n* [Docco](http://jashkenas.github.com/docco/) is a quick-and-dirty, literate-programming-style documentation generator.\n* [CoffeeDoc](https://github.com/omarkhan/coffeedoc) an alternative API documentation generator for CoffeeScript.\n* [JsDoc](https://github.com/micmath/jsdoc) an automatic documentation generator for JavaScript.\n* [Dox](https://github.com/visionmedia/dox) JavaScript documentation generator for node using markdown and jsdoc.\n\n## Core Team\n\n* [Boris Staal](https://github.com/inossidabile) ([@_inossidabile](http://twitter.com/#!/_inossidabile))\n* [Michael Kessler](https://github.com/netzpirat) ([@netzpirat](http://twitter.com/#!/netzpirat), [FlinkFinger](http://www.flinkfinger.com))\n\n## Acknowledgment\n\n- [Jeremy Ashkenas](https://github.com/jashkenas) for [CoffeeScript](http://coffeescript.org/), that mighty language\nthat compiles to JavaScript and makes me enjoy JavaScript development.\n- [Loren Segal](https://github.com/lsegal) for creating YARD and giving me the perfect documentation syntax for\ndynamic programming languages.\n- [Stratus Editor](https://github.com/stratuseditor) for open sourcing their [fuzzy filter](https://github.com/stratuseditor/fuzzy-filter).\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012-2014 Michael Kessler, Boris Staal\n\nTemplate components are derivative works of YARD (http://yardoc.org)  \nCopyright (c) Loren Segal and licensed under the MIT license\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/coffeedoc/codo/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\n",
  "readmeFilename": "README.md",
  "_id": "codo@2.0.8",
  "dist": {
    "shasum": "6fd8fffbf47eaacf8b00988a7d0293d5692d7011"
  },
  "_from": "codo@~2.0.2",
  "_resolved": "https://registry.npmjs.org/codo/-/codo-2.0.8.tgz"
}
