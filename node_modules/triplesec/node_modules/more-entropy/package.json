{
  "name": "more-entropy",
  "version": "0.0.2",
  "description": "Generate more entropy to combine with Node's crypto.rng or window.crypto",
  "homepage": "https://github.com/keybase/entropy",
  "repository": {
    "type": "git",
    "url": "https://github.com/keybase/entropy.git"
  },
  "devDependencies": {},
  "dependencies": {
    "iced-coffee-script": "*"
  },
  "directories": {
    "lib": "lib"
  },
  "scripts": {
    "make": "make"
  },
  "main": "lib/main.js",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    }
  ],
  "readme": "more-entropy\n=======\n\nThe easiest way to generate pseudorandom numbers in the browser is with `window.crypto.getRandomValues`, and in Node.js you can use `crypto.rng`. \nBut for the truly paranoid, getting even more entropy is a good idea. For example, one might seed their own key generator with a combination\nof `window.crypto` and a series of coordinates collected from mouse movements or key mashes.\n\nEven though the mouse movements of the user are not very random, it's extra noise, adding a layer of safety. Perhaps each [x,y] mouse\nlocation is worth a bit or two of entropy.\n\n`more-entropy` achieves the same results but without user interaction or ugly integration with your DOM. \nIt generates entropy by counting how many operations it can perform in a unit of time, which fluctuates\nunpredictably based on other system processes and low-level architectural specifics (like cache misses and FPU pipelines).\n\nA good use of this module is to combine its output with\n`window.crypto.getRandomValue` or `crypto.rng`, and use the\nresult as a seed for a deterministic random bit generator (like \n[HMAC_DRBG](http://csrc.nist.gov/publications/nistpubs/800-90A/SP800-90A.pdf)).\nYou'll have an extra layer of protection if you're afraid that the\nstandard random number generators are compromised.\n\n\n### Installation\n\n```bash\nnpm install -g more-entropy\n```\n\n### Usage\n\n```javascript\nvar m = require('more-entropy');\n\n// create a generator, which can provide you with some entropy\nvar c = new m.Generator();\n\n// get an array of integers with at least 100 bits of combined entropy:\nc.get_entropy(100, function(vals) {\n  console.log(vals); // [-4358,543,9089,...]\n});\n\n```\n\n### What it's doing\n\nThis generator repeatedly does as many floating point operations as it can in 1ms-2ms time periods (typically many thousands), and compares this value to previous attempts.\nThe delta is then added to a collection with a very conservative estimate for bits of entropy.\n\nMuch like the mouse movement technique, we are collecting a lot of data and assuming it's just a little bit random.\n\n### Notes\n\n * entropy is calculated by changes in performance; for example, extreme high performance with no variation yields zero entropy. Only fluctuations are captured.\n * this will work even if your system is bogged down (it'll just take longer)\n * it only CPU blocks for bursts up to 2ms, so it's safe in the browser and in Node.js\n * `get_entropy` can be called as many times as you like, even concurrently; it will call back with uniquely calculated data to each request\n * return values are small integers (sometimes < 1000) and may be negative\n * entropy is collected over time, so a request for lots of bits could take a while\n\n### One Big Assumption\n\n * your CPU is not shared with an attacker; a carefully timed attack on the CPU could produce entropy less than what's requested\n\n### Options\n\n`new m.Generator()` can be called with extra options:\n\n```javascript\nvar c = new m.Generator({\n  'loop_delay':        10 // how many milliseconds to pause between each operation loop. A lower value will generate entropy faster, but will also be harder on the CPU\n  'work_min':           1 // milliseconds per loop; a higher value blocks the CPU more, so 1 is recommended\n  'auto_stop_bits':  4096 // the generator prepares entropy for you before you request it; if it reaches this much unclaimed entropy it will stop working\n  'max_bits_per_delta': 4 // a safety cap on how much entropy it can claim per value; 4 (default) is very conservative. a larger value will allow faster entropy generation\n});\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/keybase/entropy/issues"
  },
  "_id": "more-entropy@0.0.2",
  "dist": {
    "shasum": "776b6c4fa95069d412b012709eb7f2c14eddb790"
  },
  "_from": "more-entropy@~0.0.2",
  "_resolved": "https://registry.npmjs.org/more-entropy/-/more-entropy-0.0.2.tgz"
}
