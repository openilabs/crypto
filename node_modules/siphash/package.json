{
  "author": {
    "name": "Frank Denis",
    "email": "j at pureftpd dot org"
  },
  "bugs": {
    "url": "https://github.com/jedisct1/siphash-js/issues"
  },
  "description": "SipHash-2-4 fast short-input pseudo-random function",
  "homepage": "https://github.com/jedisct1/siphash-js",
  "keywords": [
    "prf",
    "hash",
    "crypto"
  ],
  "license": "Public Domain",
  "main": "index.js",
  "name": "siphash",
  "repository": {
    "type": "git",
    "url": "https://github.com/jedisct1/siphash-js.git"
  },
  "scripts": {
    "test": "node test/index.js"
  },
  "version": "1.0.1",
  "readme": "siphash.js\n==========\n\nA pure Javascript implementation of\n[SipHash-2-4](http://131002.net/siphash/siphash.pdf)\n\n> SipHash is a family of pseudorandom functions optimized for short\n> inputs. Target applications include network traffic authentication and\n> hash-table lookups protected against hash-flooding denial-of-service\n> attacks. SipHash has well-defined security goals and competitive\n> performance.\n\nInstallation\n------------\n\nServer-side installation (nodejs):\n\n    $ npm install siphash\n\nBrowser-side: use `lib/siphash.min.js`.\n\nUsage\n-----\n\n```javascript\nvar siphash = require(\"siphash\"),\n    key = siphash.string16_to_key(\"0123456789ABCDEF\"),\n    message = \"Short test message\",\n    hash_hex = siphash.hash_hex(key, message);\n```\n\nA key is an array of 4 integers, and each of them will be clamped to\n32 bits in order to build a 128-bit key.\nFor a random key, just generate 4 random integers instead of calling\n`string16_to_key()`.\n\n```javascript\nvar siphash = require(\"siphash\"),\n    key = [ 0xdeadbeef, 0xcafebabe, 0x8badf00d, 0x1badb002 ],\n    message = \"Short test message\",\n    hash_hex = siphash.hash_hex(key, message);\n```\n\nThe 64-bit hash can also be obtained as two 32-bit values with\n`hash(key, message)`:\n\n```javascript\nvar siphash = require(\"siphash\"),\n    key = [ 0xdeadbeef, 0xcafebabe, 0x8badf00d, 0x1badb002 ],\n    message = \"Short test message\",\n    hash = siphash.hash(key, message),\n    hash_msb = hash.h,\n    hash_lsb = hash.l;\n```\n\nA 53-bit unsigned integer can be obtained with `hash_uint(key, message)`:\n\n```javascript\nvar siphash = require(\"siphash\"),\n    key = siphash.string16_to_key(\"0123456789ABCDEF\"),\n    message = \"Short test message\",\n    index = siphash.hash_uint(key, message);\n```\n",
  "readmeFilename": "README.md",
  "_id": "siphash@1.0.1",
  "_from": "siphash@"
}
